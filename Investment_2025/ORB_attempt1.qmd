---
title: "ORB_NASDAQ_5min"
author: "Lajos Galambos"
format: md
---

## Introduction

This document outlines the implementation of an Opening Range Breakout (ORB) strategy using 5-minute intraday data for the NASDAQ-100 ETF (QQQ). The strategy is designed to capture price movements based on the opening range of the first two 5-minute candles after market open.

The idea to test such approach comes from [a study by Carlo Zarattini, Andrea Barbon, Andrew Aziz (2024)](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4729284).

```{r}
#| echo: false
#| warning: false
#| output: false
#| message: false
# install.packages(c("dplyr", "TTR", "lubridate"))
```

## Data

```{r}
#| echo: false
#| warning: false
#| output: false
str(df)
```

Data has been gethered from the EOD API and saved as a Parquet file. The dataset contains 5-minute OHLCV data for QQQ, including datetime, open, high, low, close, volume, and ticker information.

The timezone is set to "America/New_York" to align with the NASDAQ trading hours.

The time span goes from 2020-10-09 to 2025-05-21.

```{r}
#| echo: false
#| warning: false
#| output: false
#| message: false
#install.packages("arrow")
library(arrow)

df <- read_parquet("~/Desktop/qqq_5min.parquet")
head(df, 10)
tail(df, 10)
```

## Returns on the NASDAQ ETF is taken as a benchmark for the strategy performance evaluation

```{r}
#| warning: false
#| message: false
#| echo: false
plot(df$datetime, df$close, type = "l", main = "QQQ Historical Based on 5-Minute Close Prices", xlab = "Datetime", ylab = "Close Price")
```

## Applying the Strategy

1.  The direction of each trade (long or short) was determined by the initial movement of the opening range.
2.  The stop loss was placed at the low of the day (which was the low of the first 5-minute candle) for a long trade, and at the high of the day (which was the high of the first 5-minute candle) for a short trade.
3.  The distance between the entry price and the stop is labeled as Risk(\$R). Returns are also evaluated based on their multiple of this.
4.  We set the profit target at 10x the \$R. Should the target not have been reached by the end of the day (EoD), we liquidated the position at market closure.
5.  We assumed a starting capital of \$100,000, a maximum leverage of 4x, and a commission of \$0.0005/share traded.
6.  Contrary to the authors, we assumed that that entire balance on the account can be used for all the trades every trading day.

```{r}
#| warning: false
#| message: false
#| output: false
#| echo: false
library(dplyr)
library(lubridate)

run_orb_backtest <- function(df, 
                             initial_capital = 100000, 
                             risk_per_trade_pct = 1, 
                             profit_target_multiplier = 10, 
                             commission_per_share = 0.0005, 
                             max_leverage = 4) {
  
  # Preprocess
  df <- df %>%
    mutate(
      date = as.Date(datetime),
      time = format(datetime, "%H:%M:%S")
    ) %>%
    arrange(datetime)
  
  trading_days <- unique(df$date)
  current_capital <- initial_capital
  trade_log <- tibble()
  
  for (day in trading_days) {
    
    day_data <- df %>% filter(date == day) %>% arrange(datetime)
    if (nrow(day_data) < 2) next
    
    # OR candle (first 5-min)
    or_candle <- day_data[1, ]
    or_open <- or_candle$open
    or_close <- or_candle$close
    or_high <- or_candle$high
    or_low <- or_candle$low
    
    if (anyNA(c(or_open, or_close, or_high, or_low))) next
    
    # Entry candle (second 5-min)
    entry_bar <- day_data[2, ]
    entry_price <- entry_bar$open
    entry_time <- entry_bar$datetime
    if (is.na(entry_price)) next
    
    # Determine direction
    direction <- case_when(
      or_close > or_open ~ "Long",
      or_close < or_open ~ "Short",
      TRUE ~ NA_character_
    )
    if (is.na(direction)) next
    
    # Stop loss
    stop_price <- if (direction == "Long") or_low else or_high
    risk_per_share <- abs(entry_price - stop_price)
    if (risk_per_share <= 0) next
    
    # Position sizing

    target_notional <- current_capital * max_leverage
    shares_traded <- floor(target_notional / entry_price)


    risk_dollars <- shares_traded * risk_per_share
    max_allowed_risk <- current_capital * risk_per_trade_pct

    if (risk_dollars > max_allowed_risk) next  # skip if risk too high
    
    # Profit target
    profit_target_price <- if (direction == "Long") {
      entry_price + profit_target_multiplier * risk_per_share
    } else {
      entry_price - profit_target_multiplier * risk_per_share
    }
    
    # Simulate intraday trade
    after_entry <- day_data %>% filter(datetime >= entry_time)
    exit_price <- NA
    exit_time <- NA
    exit_reason <- "EoD"
    
    for (i in 1:nrow(after_entry)) {
      bar <- after_entry[i, ]
      
      if (anyNA(c(bar$high, bar$low, bar$close))) next
      
      if (direction == "Long") {
        if (bar$high >= profit_target_price) {
          exit_price <- profit_target_price
          exit_time <- bar$datetime
          exit_reason <- "TP"
          break
        }
        if (bar$low <= stop_price) {
          exit_price <- stop_price
          exit_time <- bar$datetime
          exit_reason <- "SL"
          break
        }
      } else {
        if (bar$low <= profit_target_price) {
          exit_price <- profit_target_price
          exit_time <- bar$datetime
          exit_reason <- "TP"
          break
        }
        if (bar$high >= stop_price) {
          exit_price <- stop_price
          exit_time <- bar$datetime
          exit_reason <- "SL"
          break
        }
      }
      
      if (i == nrow(after_entry)) {
        exit_price <- bar$close
        exit_time <- bar$datetime
        exit_reason <- "EoD"
      }
    }
    
    # PnL and log
    if (is.na(exit_price)) next
    
    gross_pnl <- if (direction == "Long") {
      (exit_price - entry_price) * shares_traded
    } else {
      (entry_price - exit_price) * shares_traded
    }
    
    commission_total <- shares_traded * commission_per_share * 2
    net_pnl <- gross_pnl - commission_total
    
    trade_log <- bind_rows(trade_log, tibble(
      Date = day,
      EntryTime = entry_time,
      ExitTime = exit_time,
      Direction = direction,
      EntryPrice = entry_price,
      ExitPrice = exit_price,
      StopPrice = stop_price,
      TPPrice = profit_target_price,
      R = risk_per_share,
      Shares = shares_traded,
      NotionalPosition = shares_traded * entry_price, 
      MarginUsed = (shares_traded * entry_price) / max_leverage,
      GrossPnL = gross_pnl,
      Commission = commission_total,
      NetPnL = net_pnl,
      ExitReason = exit_reason,
      CapitalBefore = current_capital,
      CapitalAfter = current_capital + net_pnl
    ))
    
    current_capital <- current_capital + net_pnl
  }
  
  return(trade_log)
}
```

```{r}
#| warning: false
#| message: false
#| otput: false
#| echo: false
results <- run_orb_backtest(df)
# View(results)
```

```{r}
#| warning: false
#| message: false
#| output: false
#| echo: false
summarize_orb_performance <- function(trade_log, df, rf = 0.045) {
  if (nrow(trade_log) == 0) {
    message("No trades to summarize.")
    return(NULL)
  }

  library(dplyr)
  library(ggplot2)
  library(lubridate)
  library(scales)
  library(tidyr)
  library(broom)

  # --- Preprocess trade log ---
  trade_log <- trade_log %>%
    mutate(
      R_multiple = NetPnL / (R * Shares),
      ExitTime = as.POSIXct(ExitTime),
      LeverageUsed = NotionalPosition / CapitalBefore
    )

  first_date <- min(trade_log$ExitTime)
  last_date <- max(trade_log$ExitTime)
  total_days <- as.numeric(difftime(last_date, first_date, units = "days"))
  capital_curve <- trade_log$CapitalAfter
  daily_returns <- diff(capital_curve) / head(capital_curve, -1)

  # --- Performance metrics ---
  total_return <- (last(capital_curve) - first(trade_log$CapitalBefore)) / first(trade_log$CapitalBefore)
  annualized_return <- (1 + total_return)^(252 / total_days) - 1
  annualized_vol <- sd(daily_returns, na.rm = TRUE) * sqrt(252)
  annualized_sharpe <- ifelse(annualized_vol > 0,
                              (mean(daily_returns, na.rm = TRUE) * 252 - rf) / annualized_vol,
                              NA)
  cum_max <- cummax(capital_curve)
  drawdowns <- capital_curve / cum_max - 1
  max_dd <- min(drawdowns, na.rm = TRUE)

  # --- Benchmark processing ---
  strat_curve <- trade_log %>%
    mutate(Date = as.Date(ExitTime)) %>%
    group_by(Date) %>%
    summarize(StrategyCapital = max(CapitalAfter), .groups = "drop")

  bh_curve <- df %>%
    filter(Ticker == "QQQ.US") %>%
    mutate(Date = as.Date(datetime)) %>%
    group_by(Date) %>%
    summarize(QQQ_Close = last(close), .groups = "drop") %>%
    filter(Date >= min(strat_curve$Date), Date <= max(strat_curve$Date)) %>%
    mutate(BnH_Capital = first(strat_curve$StrategyCapital) * (QQQ_Close / first(QQQ_Close)))

  # --- Alpha estimation with regression (CAPM style) ---
  merged_returns <- left_join(strat_curve, bh_curve, by = "Date") %>%
    arrange(Date) %>%
    mutate(
      strat_ret = c(NA, diff(StrategyCapital)) / lag(StrategyCapital),
      qqq_ret = c(NA, diff(BnH_Capital)) / lag(BnH_Capital)
    ) %>%
    drop_na(strat_ret, qqq_ret)

  capm_model <- lm(strat_ret ~ qqq_ret, data = merged_returns)
  alpha <- coef(capm_model)[1] * 252  # annualize daily alpha
  beta <- coef(capm_model)[2]

  # --- Summary statistics ---
  stats <- tibble(
    Metric = c(
      "Total Return (%)", "Annualized Return (%)", "Annualized Volatility (%)", "Annualized Sharpe Ratio",
      "Max Drawdown (%)", "CAPM Alpha (%)", "Beta", "Total Trades", "Winning Trades",
      "Losing Trades", "Breakeven Trades", "Win Rate (%)", "Avg Net PnL", "Profit Factor",
      "Total Commission Paid", "Avg Position Notional", "Avg Leverage Used"
    ),
    Value = sprintf("%.4f", c(
      total_return * 100,
      annualized_return * 100,
      annualized_vol * 100,
      annualized_sharpe,
      max_dd * 100,
      alpha * 100,
      beta,
      nrow(trade_log),
      sum(trade_log$NetPnL > 0),
      sum(trade_log$NetPnL < 0),
      sum(trade_log$NetPnL == 0),
      mean(trade_log$NetPnL > 0) * 100,
      mean(trade_log$NetPnL),
      ifelse(sum(trade_log$NetPnL < 0) == 0, NA,
             sum(trade_log$NetPnL[trade_log$NetPnL > 0]) / abs(sum(trade_log$NetPnL[trade_log$NetPnL < 0]))),
      sum(trade_log$Commission),
      mean(trade_log$NotionalPosition),
      mean(trade_log$LeverageUsed)
    ))
  )

  print(stats)

  # --- Plot: Strategy vs Buy & Hold ---
  ggplot(merged_returns, aes(x = Date)) +
    geom_line(aes(y = StrategyCapital, color = "Strategy")) +
    geom_line(aes(y = BnH_Capital, color = "Buy & Hold QQQ")) +
    scale_color_manual(values = c("Strategy" = "steelblue", "Buy & Hold QQQ" = "darkorange")) +
    scale_y_continuous(labels = label_number(scale_cut = cut_short_scale())) +
    labs(
      title = "Equity Curve: Strategy vs Buy & Hold QQQ",
      x = "Date", y = "Capital ($)",
      color = "Legend"
    ) +
    theme_minimal()
}

```

```{r}
#| warning: false
#| message: false
#| echo: false
log <- run_orb_backtest(df)
summarize_orb_performance(log, df)
```

Despite the returns look attractive, the performance is still far behind the one outlined by the paper, which is problematic since the identical strategy was applied.

Although the strategy produced mostly alpha returns, which is a key feature of successful trading strategies, the Sharp-ratio remained poor (4.5% risk free was assumed).

```{r}
#| warning: false
#| message: false
#| echo: false
library(ggplot2)

# Filter valid trades and compute R-multiples
valid_trades <- log %>% 
  filter(!is.na(NetPnL), !is.na(R), R > 0) %>%
  mutate(
    R_Multiple = NetPnL / (R * Shares),
    ExitTime = as.POSIXct(ExitTime)
  )

# Compute key stats
mean_r <- mean(valid_trades$R_Multiple, na.rm = TRUE)
mean_win <- mean(valid_trades$R_Multiple[valid_trades$R_Multiple > 0], na.rm = TRUE)
mean_loss <- mean(valid_trades$R_Multiple[valid_trades$R_Multiple < 0], na.rm = TRUE)

# Plot
ggplot(valid_trades, aes(x = ExitTime, y = R_Multiple)) +
  geom_line(color = "steelblue", linewidth = 0.5) +
  geom_point(color = "steelblue", size = 1) +
  geom_hline(yintercept = mean_r, color = "darkred", linetype = "dashed", linewidth = 1) +
  geom_hline(yintercept = mean_win, color = "black", linetype = "dotted", linewidth = 1) +
  geom_hline(yintercept = mean_loss, color = "red", linetype = "dotted", linewidth = 1) +
  labs(
    title = "R-Multiple of Each Trade Over Time",
    x = "Exit Time",
    y = "R Multiple (NetPnL / Risk)"
  ) +
  annotate("text", 
           x = min(valid_trades$ExitTime, na.rm = TRUE), 
           y = mean_r,
           label = paste0("Mean R: ", round(mean_r, 2)),
           vjust = -1, hjust = 0, color = "darkred", size = 4) +
  annotate("text", 
           x = min(valid_trades$ExitTime, na.rm = TRUE), 
           y = mean_win,
           label = paste0("Mean Win R: ", round(mean_win, 2)),
           vjust = -1, hjust = 0, color = "black", size = 4) +
  annotate("text", 
           x = min(valid_trades$ExitTime, na.rm = TRUE), 
           y = mean_loss,
           label = paste0("Mean Loss R: ", round(mean_loss, 2)),
           vjust = 1.5, hjust = 0, color = "red", size = 4) +
  theme_minimal()
```

The line chart shows the mean returns (in terms of R) of the trades over time. The horizontal dashed line represents the average R multiple across all trades, while the dotted lines indicate the average R multiples for winning, losing and overall trades.

## Conclusion

The Opening Range Breakout strategy applied to the NASDAQ-100 ETF (QQQ) using 5-minute intraday data has shown potential for generating alpha returns. However, the overall performance, as measured by the Sharpe ratio and other metrics, indicates that the strategy may not be robust enough for consistent profitability.

Moreover, the performance lacks behind the results outlined in the referenced paper, suggesting that further refinement and optimization of the strategy parameters may be necessary.
