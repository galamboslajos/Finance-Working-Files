---
title: "Prediction_Automated"
author: "Lajos Galambos"
format: md
---

# Simplistic Return (Direction) Prediction with Logistic Regression

In a [previous file](https://github.com/galamboslajos/Finance-Working-Files/blob/main/Investment_2025/Index_Modelling.md), we tried out multiple methods to come up with precise prediction results for Nasdaq 100 daily returns (direction: +/-).

This time we want to implement those results form a simplistic Logistic Regression model to a more automated process. We will work with code that feeds the model with new data and returns the up to date predictions for the coming trading day.

## Variables, Data

We retrieve the NASDAQ Composite Index (`^IXIC`) from Yahoo Finance and calculate **daily log returns**. We split the data into a **larger training set** (10 years) and a **testing set** (last 3 years).

```{r}
#| eval: false
# Training set
from = Sys.Date() - (365 * 10),
to = Sys.Date()

# Testing set
split_date <- as.Date("2023-01-01")  # split date
train_data <- full_data %>% filter(date < split_date)
test_data <- full_data %>% filter(date >= split_date)
```

### Independent Variables

-   `r_lag1`, `r_lag2`, `r_lag3`: 1-, 2-, and 3-day lagged returns
-   `abs_r_lag1`: absolute return 1 day ago (volatility proxy)
-   `roll_mean5`: 5-day rolling mean of returns
-   `roll_sd5`: 5-day rolling standard deviation of returns

### Dependent Variable

-   `target`: Binary variable: 1 if return on day *t* \> 0, else 0

## The Logistic Regression Model

The model estimates the **log-odds** of the outcome:

\[ \log\left(\frac{P(Y=1)}{1 - P(Y=1)}\right) = \beta\_0 + \beta\_1 X_1 + \beta\_2 X_2 + \dots + \beta\_k X_k \]

This can be transformed into a probability using the **logistic function**:

\[ P(Y=1 \mid X) = \frac{1}{1 + e^{-(\beta_0 + \beta_1 X_1 + \dots + \beta_k X_k)}} \]

The model **does not directly predict probability** of the target variable, but after converting with the **logistic function**, we can use it to predict the probability of the target variable being 1.

```{r}
#| echo: false
#| message: false
#| warning: false
# ================================
# Logistic Regression Model with Sanity Checks
# ================================

library(quantmod)
library(dplyr)
library(zoo)

nasdaq_data <- getSymbols("^IXIC", src = "yahoo",
                          from = Sys.Date() - (365 * 10),
                          to = Sys.Date(), 
                          auto.assign = FALSE)

nasdaq_returns <- dailyReturn(Cl(nasdaq_data), type = "log")

full_data <- data.frame(
  date = index(nasdaq_returns),
  return = as.numeric(nasdaq_returns)
) %>%
  mutate(
    r_lag1 = lag(return, 1),
    r_lag2 = lag(return, 2),
    r_lag3 = lag(return, 3),
    abs_r_lag1 = abs(lag(return, 1)),
    roll_mean5 = rollapply(return, width = 5, FUN = mean, align = "right", fill = NA),
    roll_sd5 = rollapply(return, width = 5, FUN = sd, align = "right", fill = NA),
    target = ifelse(return > 0, 1, 0)  # Binary target: 1 if return > 0, else 0
  ) %>%
  na.omit()

cat("\n### Sample of Feature Set:\n")
print(knitr::kable(head(full_data, 5), format = "markdown"))

split_date <- as.Date("2023-01-01")  # split date
train_data <- full_data %>% filter(date < split_date)
test_data <- full_data %>% filter(date >= split_date)

X_train <- train_data %>% select(r_lag1, r_lag2, r_lag3, abs_r_lag1, roll_mean5, roll_sd5)
y_train <- train_data$target
model_data <- cbind(X_train, target = y_train)

logistic_model <- glm(target ~ ., data = model_data, family = binomial(link = "logit"))

cat("\n### Logistic Regression Model Summary:\n")
summary_output <- capture.output(summary(logistic_model))
cat(paste("```\n", paste(summary_output, collapse = "\n"), "\n```", sep = ""))
```

The logistic regression model estimates the probability that the NASDAQ return is **positive on day *t***, based on lagged return features.

## Results:
- **Strongly significant predictors:**  
  - `r_lag1`, `r_lag2`, and `r_lag3` have **large negative coefficients**, suggesting that strong recent returns are associated with a **lower** probability of another up day — possibly a **mean-reverting** behavior.
  - `roll_mean5` has a **very strong positive** coefficient, indicating that short-term upward momentum increases the likelihood of another positive return.
  - `roll_sd5` (volatility) is also positively associated with up moves — which may reflect **risk-on periods**.
  - `abs_r_lag1` is significant at the 5% level, indicating that large moves yesterday (regardless of direction) modestly lower today's up probability.

## Statistical Fit:
- **AIC:** 2057.1 — useful for model comparison
- **Residual deviance** is substantially lower than the null deviance, indicating a better fit than the intercept-only model.
- All features are statistically significant at conventional levels.

This model appears to be capturing both **momentum** and **reversion** patterns. 

## Diagnostics

```{r}
#| echo: false
#| message: false
#| warning: false
# ================================
# Model Evaluation: Accuracy, Confusion Matrix, ROC Curve, and Metrics
# ================================

# Required libraries
#install.packages("caret")
# install.packages("pROC")
library(caret)  
library(pROC)   
library(ggplot2) 

train_data$predicted_prob <- predict(logistic_model, newdata = X_train, type = "response")
train_data$predicted_class <- ifelse(train_data$predicted_prob > 0.55, 1, 0)

X_test <- test_data %>% select(r_lag1, r_lag2, r_lag3, abs_r_lag1, roll_mean5, roll_sd5)
test_data$predicted_prob <- predict(logistic_model, newdata = X_test, type = "response")
test_data$predicted_class <- ifelse(test_data$predicted_prob > 0.55, 1, 0)

cat("\n### Confusion Matrix (Training Data):\n")
conf_matrix_train <- confusionMatrix(
  factor(train_data$predicted_class),
  factor(train_data$target),
  positive = "1"
)
print(knitr::kable(conf_matrix_train$table, format = "markdown"))

cat("\n### Accuracy (Training Data):\n")
print(conf_matrix_train$overall["Accuracy"])

cat("\n### Confusion Matrix (Testing Data):\n")
conf_matrix_test <- confusionMatrix(
  factor(test_data$predicted_class),
  factor(test_data$target),
  positive = "1"
)
print(knitr::kable(conf_matrix_test$table, format = "markdown"))

cat("\n### Accuracy (Testing Data):\n")
print(conf_matrix_test$overall["Accuracy"])

roc_curve_train <- roc(train_data$target, train_data$predicted_prob)
roc_curve_test <- roc(test_data$target, test_data$predicted_prob)

cat("\n### AUC (Training Data):\n")
print(auc(roc_curve_train))

cat("\n### AUC (Testing Data):\n")
print(auc(roc_curve_test))

plot(roc_curve_train, col = "blue", main = "ROC Curve (Training vs Testing)", lwd = 2)
lines(roc_curve_test, col = "green", lwd = 2)
abline(a = 0, b = 1, lty = 2, col = "red")  # Diagonal line for random guessing
legend("bottomright", legend = c("Training", "Testing"), col = c("blue", "green"), lwd = 2)

rmse_train <- sqrt(mean((train_data$predicted_prob - train_data$target)^2))
cat("\n### Root Mean Squared Error (RMSE) - Training Data:\n")
print(rmse_train)

rmse_test <- sqrt(mean((test_data$predicted_prob - test_data$target)^2))
cat("\n### Root Mean Squared Error (RMSE) - Testing Data:\n")
print(rmse_test)

cat("\n### Akaike Information Criterion (AIC):\n")
print(AIC(logistic_model))


coefficients <- summary(logistic_model)$coefficients
feature_importance <- data.frame(
  Feature = rownames(coefficients)[-1],  
  Importance = abs(coefficients[-1, "Estimate"])  
)

cat("\n### Feature Importance:\n")
ggplot(feature_importance, aes(x = reorder(Feature, Importance), y = Importance)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +
  labs(title = "Feature Importance", x = "Features", y = "Importance") +
  theme_minimal()
```

### Performance Metrics

| Metric                    | Training Set | Testing Set |
|---------------------------|--------------|-------------|
| **Accuracy**              | 0.758        | 0.757       |
| **AUC (ROC Curve)**       | 0.8147       | 0.8092      |
| **RMSE (Error)**          | 0.4187       | 0.4190      |
| **AIC**                   | —            | 2057.1      |

The model demonstrates strong classification ability with **AUC values over 0.80**, indicating good discrimination between up and down days.

---

### Confusion Matrix (Testing Set)

|               | Predicted Down | Predicted Up |
|---------------|----------------|--------------|
| **Actual Down** | 652            | 252          |
| **Actual Up**   | 213            | 806          |

- **Sensitivity** (True Positive Rate): ~79.1%  
- **Specificity** (True Negative Rate): ~72.1%

The model performs slightly better at predicting up days than down days.

---

### ROC Curve

Both training and testing ROC curves show strong performance, with the model maintaining good true positive rates across threshold levels.

The optimal threshold for classification is determined using Youden's index, which maximizes the sum of sensitivity and specificity:

```{r}
#| message: false
#| warning: false
opt_coords <- coords(roc_curve_train, "best", ret = "threshold", transpose = FALSE)
opt_threshold <- opt_coords["threshold"]
cat(sprintf("\n### Optimal threshold (Youden index): %.3f\n", opt_threshold))
```

### Feature Importance

The most influential predictors in the model (based on absolute coefficient magnitude) are:

- **`roll_mean5`**: Short-term average return — strongest positive signal
- **`r_lag1`, `r_lag2`, `r_lag3`**: Recent lagged returns — strong negative coefficients indicate potential mean reversion
- **`roll_sd5`**: Short-term volatility — contributes positively but less strongly
- **`abs_r_lag1`**: Absolute return yesterday — small but significant

## Prediction for today

For the most recent trading day, the model calculates features based on the previous five days of return data. These are passed into the trained logistic regression model to compute the **probability that today's return will be positive**.

```{r}
#| echo: false
#| message: false
#| warning: false
# ================================
# Daily NASDAQ Trading Suggestion (with recent data + model sanity check)
# ================================

library(quantmod)
library(dplyr)
library(zoo)
library(knitr)

nasdaq_data <- getSymbols("^IXIC", src = "yahoo",
                          from = Sys.Date() - 365*10,
                          to = Sys.Date(),
                          auto.assign = FALSE)

nasdaq_returns <- dailyReturn(Cl(nasdaq_data), type = "log")
returns_df <- data.frame(
  date = index(nasdaq_returns),
  return = as.numeric(nasdaq_returns)
)

full_data <- returns_df %>%
  mutate(
    r_lag1 = lag(return, 1),
    r_lag2 = lag(return, 2),
    r_lag3 = lag(return, 3),
    abs_r_lag1 = abs(lag(return, 1)),
    roll_mean5 = rollapply(return, 5, mean, align = "right", fill = NA),
    roll_sd5 = rollapply(return, 5, sd, align = "right", fill = NA),
    target = ifelse(return > 0, 1, 0)
  ) %>%
  na.omit()

X_train <- full_data %>% select(r_lag1, r_lag2, r_lag3, abs_r_lag1, roll_mean5, roll_sd5)
y_train <- full_data$target
logistic_model <- glm(y_train ~ ., data = X_train, family = binomial(link = "logit"))

recent_returns <- tail(returns_df, 5)

r_lag1 <- recent_returns$return[5]  # last return
r_lag2 <- recent_returns$return[4]
r_lag3 <- recent_returns$return[3]
abs_r_lag1 <- abs(r_lag1)
roll_mean5 <- mean(recent_returns$return)
roll_sd5 <- sd(recent_returns$return)

today_features <- data.frame(
  r_lag1 = r_lag1,
  r_lag2 = r_lag2,
  r_lag3 = r_lag3,
  abs_r_lag1 = abs_r_lag1,
  roll_mean5 = roll_mean5,
  roll_sd5 = roll_sd5
)

prob_up <- predict(logistic_model, newdata = today_features, type = "response")
decision <- ifelse(prob_up > 0.55, 1, 0)

cat("### Trading Suggestion for Today:\n")
cat(sprintf("- Date: %s\n", Sys.Date()))
cat(sprintf("- Probability market goes UP: %.2f%%\n", prob_up * 100))
cat(sprintf("- Suggested action: **%s**\n\n", ifelse(decision == 1, "BUY NASDAQ", "STAY IN CASH")))

cat("### Features Used for Today’s Prediction:\n")
print(kable(today_features, format = "markdown"))

cat("\n### Last 5 NASDAQ Closing Prices:\n")
closing_prices <- Cl(nasdaq_data)
print(kable(
  data.frame(Date = index(tail(closing_prices, 5)),
             Close = round(as.numeric(tail(closing_prices, 5)), 2)),
  format = "markdown"))

yesterday_return <- recent_returns$return[5]
actual_movement <- ifelse(yesterday_return > 0, 1, 0)

cat("\n### Model Sanity Check (Last Trading Day):\n")
cat(sprintf("- Return on %s was: %.4f → Market actually went %s\n",
            recent_returns$date[5],
            yesterday_return,
            ifelse(actual_movement == 1, "UP", "DOWN")))
cat(sprintf("- Model suggests **%s** today based on that.\n\n",
            ifelse(decision == 1, "BUY (1)", "STAY IN CASH (0)")))
```


## Backtested Strategy in the test set

First, I am curious about the number of trades per year in the test set. I will count the number of trades per year based on the predicted class.

```{r}
#| echo: false
#| message: false
#| warning: false
library(dplyr)
library(lubridate)

# Ensure date is in Date format
test_data <- test_data %>%
  mutate(date = as.Date(date),
         year = year(date))

# Identify trade entry points: when predicted_class switches from 0 to 1
test_data <- test_data %>%
  mutate(prev_signal = lag(predicted_class, default = 0),
         trade_entry = ifelse(predicted_class == 1 & prev_signal == 0, 1, 0))

# Count number of trades per year
trades_per_year <- test_data %>%
  group_by(year) %>%
  summarise(number_of_trades = sum(trade_entry))

# View results
print(trades_per_year)

```

Now let's observe the cumulative returns of the **strategy** (when the model tells us to buy) compared to the **market** and a **perfect foresight** strategy. The perfect foresight strategy assumes that we know the actual return for the next day (assuming that we always bought the positive days) in advance (no short selling).

## Cummulative performance in the test set

```{r}
#| echo: false
#| message: false
#| warning: false

library(dplyr)
library(ggplot2)

test_data <- test_data %>%
  mutate(
    strategy_return = ifelse(predicted_class == 1, return, 0),
    cumulative_strategy_return = cumprod(1 + strategy_return),
    cumulative_market_return = cumprod(1 + return),
    perfect_return = ifelse(target == 1, return, 0),
    cumulative_perfect_return = cumprod(1 + perfect_return)
  )

ggplot(test_data, aes(x = as.Date(date))) +
  geom_line(aes(y = cumulative_strategy_return, color = "Strategy")) +
  geom_line(aes(y = cumulative_market_return, color = "Market (Buy & Hold)")) +
  geom_line(aes(y = cumulative_perfect_return, color = "Perfect Foresight")) +
  labs(
    title = "Cumulative Returns: Strategy vs Market vs Perfect Foresight",
    x = "Date",
    y = "Cumulative Return",
    color = "Legend"
  ) +
  theme_minimal()
```
