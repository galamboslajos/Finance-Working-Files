---
title: "AAPL_Forecast"
author: "Lajos Galambos"
format: html
---

```{r}
install.packages("quantmod")
install.packages("forecast")
install.packages("tseries")
install.packages("xts")
library(quantmod)
library(forecast)
library(tseries)
library(xts)
```


```{r}
##### This is a nicer plot with green/red colors for up/down days #####
getSymbols("AAPL", src = "yahoo", from = "2000-01-01", to = Sys.Date())

df <- data.frame(Date = index(AAPL), coredata(AAPL))

str(df)

chartSeries(AAPL, theme = chartTheme("white"), TA = NULL)
```


```{r}
##### This is a simple plot the LOG STOCK PRICE with blue color #####
getSymbols("AAPL", src = "yahoo", from = "2000-01-01", to = Sys.Date())

df <- AAPL[, "AAPL.Adjusted"]

df_log <- log(df)

plot(df_log, main = "Log-Transformed AAPL Adjusted Close Price", col = "blue", lwd = 1.5)
```
```{r}
##### Split the data into training and test sets #####
train_size <- nrow(df_log) - 60

df_train <- df_log[1:train_size, , drop = FALSE]  
df_test <- df_log[(train_size + 1):nrow(df_log), , drop = FALSE]  

cat("Training set size:", nrow(df_train), "\n")
cat("Test set size:", nrow(df_test), "\n")
```

```{r}
##### WE HAVE NOT ENSURED STATIONARITY YET: Plot the ACF and PACF of the training set #####
par(mfrow = c(1, 2))  
acf(df_train, main = "ACF of Log-Transformed Train Set")  
pacf(df_train, main = "PACF of Log-Transformed Train Set")
```
```{r}
##### Proof that the series is not stationary #####
# Perform Augmented Dickey-Fuller (ADF) test
adf_test <- adf.test(df_train)

cat("p-value:", adf_test$p.value, "\n")
```

A p-value of 0.133 from the ADF test suggests that the log-transformed AAPL data is non-stationary (since it's greater than 0.05). This means we cannot reject the null hypothesis, indicating that the time series has a trend or unit root.

```{r}
##### Make the time series stationary by differencing #####
df_train_diff <- diff(df_train) 

# Remove NA values (from first difference)
df_train_diff <- na.omit(df_train_diff)

plot(df_train_diff, main = "First Differences of AAPL Adjusted Close Price", col = "blue", lwd = 1.5)
```
Based on the plot, one can make the claim that once the first differences are taken, AAPL shows the visual attributions of time series is stationary: the global average of returns looks 0. This is further supported by the ACF and PACF plots below.

```{r}
##### Plot the ACF and PACF of the differenced training set #####
par(mfrow = c(1, 2))  
acf(df_train_diff, main = "ACF of Differenced Train Set")  
pacf(df_train_diff, main = "PACF of Differenced Train Set")  
```

```{r}
##### Proof that the series is stationary after differencing #####
# Perform Augmented Dickey-Fuller (ADF) test
adf_test_diff <- adf.test(df_train_diff)

cat("p-value after differencing:", adf_test_diff$p.value, "\n")
```

A p-value of 0.01 after differencing indicates that the time series is now stationary (since it's below 0.05).

```{r}
##### Fit an ARIMA model to the training set #####
# Fit ARIMA(4,1,3)
arima_model <- Arima(df_train, order = c(3,1,1))

summary(arima_model)
```

```{r}
##### Checking the residuals of the ARIMA model #####
residuals <- residuals(arima_model)

par(mfrow = c(1, 2))

plot(residuals, main = "Residuals", col = "blue", lwd = 1.5, type = "l")

plot(density(residuals), main = "Density of Residuals", col = "red", lwd = 1.5)
```

The residuals appear mostly stationary, with no clear trend or autocorrelation. There are some large spikes though. The residuals are strongly peaked, suggesting heavy tails or non-normality (altough the mean is 0). If residuals were normally distributed, this would resemble a bell curve, but the peak suggests high kurtosis.

```{r}
##### Plot ACF and PACF for residuals #####
par(mfrow = c(1, 2))  
acf(residuals, main = "ACF of Residuals")  
pacf(residuals, main = "PACF of Residuals") 
```

```{r}
##### Forecast vs actual values #####
forecast_test <- forecast(arima_model, h = 60)

forecast_values <- as.numeric(forecast_test$mean)

df_log$forecast_manual <- NA  
df_log[(train_size + 1):nrow(df_log), "forecast_manual"] <- forecast_values  

plot(df_log$AAPL.Adjusted, type = "l", col = "black", lwd = 1.5, main = "AAPL Forecast vs Actual")
lines(df_log$forecast_manual, col = "red", lwd = 1.5)
legend("topleft", legend = c("Actual", "Forecast"), col = c("black", "red"), lty = 1, lwd = 1.5)
```
```{r}
##### More recent data #####
df_recent <- df_log[index(df_log) >= "2024-01-01", ]

plot(df_recent$AAPL.Adjusted, type = "l", col = "black", lwd = 1.5,
     main = "AAPL Forecast vs Actual (2024 Onwards)", xlab = "Date", ylab = "Price")
lines(df_recent$forecast_manual, col = "red", lwd = 1.5)
legend("topleft", legend = c("Actual", "Forecast"), col = c("black", "red"), lty = 1, lwd = 1.5)
```
```{r}
##### Back-transform both actual prices and forecasted values ####
df_recent$AAPL_Actual <- exp(df_recent$AAPL.Adjusted)  
df_recent$Forecast_Actual <- exp(df_recent$forecast_manual)  

plot(index(df_recent), df_recent$AAPL_Actual, type = "l", col = "black", lwd = 1.5,
     main = "AAPL Forecast vs Actual (2024 Onwards) - Real Prices", xlab = "Date", ylab = "Price")
lines(index(df_recent), df_recent$Forecast_Actual, col = "red", lwd = 1.5)
legend("topleft", legend = c("Actual Price", "Forecasted Price"), col = c("black", "red"), lty = 1, lwd = 1.5)
```
```{r}
print(df_recent$Forecast_Actual)
```

